// auto generated by c2z
#include "imgui.h"

extern "C" ::ImVec2 _1_ImVec2_init_() { return ::ImVec2(); }
extern "C" ::ImVec2 _2_ImVec2_init_(float _x, float _y) { return ::ImVec2(_x, _y); }
extern "C" ::ImVec4 _1_ImVec4_init_() { return ::ImVec4(); }
extern "C" ::ImVec4 _2_ImVec4_init_(float _x, float _y, float _z, float _w) { return ::ImVec4(_x, _y, _z, _w); }
extern "C" ImGuiContext *_1_ImGui_CreateContext_(ImFontAtlas *shared_font_atlas) { return ::ImGui::CreateContext(shared_font_atlas); }
extern "C" void _1_ImGui_DestroyContext_(ImGuiContext *ctx) { ::ImGui::DestroyContext(ctx); }
extern "C" ImGuiContext *_1_ImGui_GetCurrentContext_() { return ::ImGui::GetCurrentContext(); }
extern "C" void _1_ImGui_SetCurrentContext_(ImGuiContext *ctx) { ::ImGui::SetCurrentContext(ctx); }
extern "C" ImGuiIO &_1_ImGui_GetIO_() { return ::ImGui::GetIO(); }
extern "C" ImGuiStyle &_1_ImGui_GetStyle_() { return ::ImGui::GetStyle(); }
extern "C" void _1_ImGui_NewFrame_() { ::ImGui::NewFrame(); }
extern "C" void _1_ImGui_EndFrame_() { ::ImGui::EndFrame(); }
extern "C" void _1_ImGui_Render_() { ::ImGui::Render(); }
extern "C" ImDrawData *_1_ImGui_GetDrawData_() { return ::ImGui::GetDrawData(); }
extern "C" void _1_ImGui_ShowDemoWindow_(bool *p_open) { ::ImGui::ShowDemoWindow(p_open); }
extern "C" void _1_ImGui_ShowMetricsWindow_(bool *p_open) { ::ImGui::ShowMetricsWindow(p_open); }
extern "C" void _1_ImGui_ShowDebugLogWindow_(bool *p_open) { ::ImGui::ShowDebugLogWindow(p_open); }
extern "C" void _1_ImGui_ShowStackToolWindow_(bool *p_open) { ::ImGui::ShowStackToolWindow(p_open); }
extern "C" void _1_ImGui_ShowAboutWindow_(bool *p_open) { ::ImGui::ShowAboutWindow(p_open); }
extern "C" void _1_ImGui_ShowStyleEditor_(ImGuiStyle *ref) { ::ImGui::ShowStyleEditor(ref); }
extern "C" bool _1_ImGui_ShowStyleSelector_(const char *label) { return ::ImGui::ShowStyleSelector(label); }
extern "C" void _1_ImGui_ShowFontSelector_(const char *label) { ::ImGui::ShowFontSelector(label); }
extern "C" void _1_ImGui_ShowUserGuide_() { ::ImGui::ShowUserGuide(); }
extern "C" const char *_1_ImGui_GetVersion_() { return ::ImGui::GetVersion(); }
extern "C" void _1_ImGui_StyleColorsDark_(ImGuiStyle *dst) { ::ImGui::StyleColorsDark(dst); }
extern "C" void _1_ImGui_StyleColorsLight_(ImGuiStyle *dst) { ::ImGui::StyleColorsLight(dst); }
extern "C" void _1_ImGui_StyleColorsClassic_(ImGuiStyle *dst) { ::ImGui::StyleColorsClassic(dst); }
extern "C" bool _1_ImGui_Begin_(const char *name, bool *p_open, ImGuiWindowFlags flags) { return ::ImGui::Begin(name, p_open, flags); }
extern "C" void _1_ImGui_End_() { ::ImGui::End(); }
extern "C" bool _1_ImGui_BeginChild_(const char *str_id, const ImVec2 &size, bool border, ImGuiWindowFlags flags) { return ::ImGui::BeginChild(str_id, size, border, flags); }
extern "C" bool _2_ImGui_BeginChild_(ImGuiID id, const ImVec2 &size, bool border, ImGuiWindowFlags flags) { return ::ImGui::BeginChild(id, size, border, flags); }
extern "C" void _1_ImGui_EndChild_() { ::ImGui::EndChild(); }
extern "C" bool _1_ImGui_IsWindowAppearing_() { return ::ImGui::IsWindowAppearing(); }
extern "C" bool _1_ImGui_IsWindowCollapsed_() { return ::ImGui::IsWindowCollapsed(); }
extern "C" bool _1_ImGui_IsWindowFocused_(ImGuiFocusedFlags flags) { return ::ImGui::IsWindowFocused(flags); }
extern "C" bool _1_ImGui_IsWindowHovered_(ImGuiHoveredFlags flags) { return ::ImGui::IsWindowHovered(flags); }
extern "C" ImDrawList *_1_ImGui_GetWindowDrawList_() { return ::ImGui::GetWindowDrawList(); }
extern "C" ImVec2 _1_ImGui_GetWindowPos_() { return ::ImGui::GetWindowPos(); }
extern "C" ImVec2 _1_ImGui_GetWindowSize_() { return ::ImGui::GetWindowSize(); }
extern "C" float _1_ImGui_GetWindowWidth_() { return ::ImGui::GetWindowWidth(); }
extern "C" float _1_ImGui_GetWindowHeight_() { return ::ImGui::GetWindowHeight(); }
extern "C" void _1_ImGui_SetNextWindowPos_(const ImVec2 &pos, ImGuiCond cond, const ImVec2 &pivot) { ::ImGui::SetNextWindowPos(pos, cond, pivot); }
extern "C" void _1_ImGui_SetNextWindowSize_(const ImVec2 &size, ImGuiCond cond) { ::ImGui::SetNextWindowSize(size, cond); }
extern "C" void _1_ImGui_SetNextWindowSizeConstraints_(const ImVec2 &size_min, const ImVec2 &size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data) { ::ImGui::SetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data); }
extern "C" void _1_ImGui_SetNextWindowContentSize_(const ImVec2 &size) { ::ImGui::SetNextWindowContentSize(size); }
extern "C" void _1_ImGui_SetNextWindowCollapsed_(bool collapsed, ImGuiCond cond) { ::ImGui::SetNextWindowCollapsed(collapsed, cond); }
extern "C" void _1_ImGui_SetNextWindowFocus_() { ::ImGui::SetNextWindowFocus(); }
extern "C" void _1_ImGui_SetNextWindowScroll_(const ImVec2 &scroll) { ::ImGui::SetNextWindowScroll(scroll); }
extern "C" void _1_ImGui_SetNextWindowBgAlpha_(float alpha) { ::ImGui::SetNextWindowBgAlpha(alpha); }
extern "C" void _1_ImGui_SetWindowPos_(const ImVec2 &pos, ImGuiCond cond) { ::ImGui::SetWindowPos(pos, cond); }
extern "C" void _1_ImGui_SetWindowSize_(const ImVec2 &size, ImGuiCond cond) { ::ImGui::SetWindowSize(size, cond); }
extern "C" void _1_ImGui_SetWindowCollapsed_(bool collapsed, ImGuiCond cond) { ::ImGui::SetWindowCollapsed(collapsed, cond); }
extern "C" void _1_ImGui_SetWindowFocus_() { ::ImGui::SetWindowFocus(); }
extern "C" void _1_ImGui_SetWindowFontScale_(float scale) { ::ImGui::SetWindowFontScale(scale); }
extern "C" void _2_ImGui_SetWindowPos_(const char *name, const ImVec2 &pos, ImGuiCond cond) { ::ImGui::SetWindowPos(name, pos, cond); }
extern "C" void _2_ImGui_SetWindowSize_(const char *name, const ImVec2 &size, ImGuiCond cond) { ::ImGui::SetWindowSize(name, size, cond); }
extern "C" void _2_ImGui_SetWindowCollapsed_(const char *name, bool collapsed, ImGuiCond cond) { ::ImGui::SetWindowCollapsed(name, collapsed, cond); }
extern "C" void _2_ImGui_SetWindowFocus_(const char *name) { ::ImGui::SetWindowFocus(name); }
extern "C" ImVec2 _1_ImGui_GetContentRegionAvail_() { return ::ImGui::GetContentRegionAvail(); }
extern "C" ImVec2 _1_ImGui_GetContentRegionMax_() { return ::ImGui::GetContentRegionMax(); }
extern "C" ImVec2 _1_ImGui_GetWindowContentRegionMin_() { return ::ImGui::GetWindowContentRegionMin(); }
extern "C" ImVec2 _1_ImGui_GetWindowContentRegionMax_() { return ::ImGui::GetWindowContentRegionMax(); }
extern "C" float _1_ImGui_GetScrollX_() { return ::ImGui::GetScrollX(); }
extern "C" float _1_ImGui_GetScrollY_() { return ::ImGui::GetScrollY(); }
extern "C" void _1_ImGui_SetScrollX_(float scroll_x) { ::ImGui::SetScrollX(scroll_x); }
extern "C" void _1_ImGui_SetScrollY_(float scroll_y) { ::ImGui::SetScrollY(scroll_y); }
extern "C" float _1_ImGui_GetScrollMaxX_() { return ::ImGui::GetScrollMaxX(); }
extern "C" float _1_ImGui_GetScrollMaxY_() { return ::ImGui::GetScrollMaxY(); }
extern "C" void _1_ImGui_SetScrollHereX_(float center_x_ratio) { ::ImGui::SetScrollHereX(center_x_ratio); }
extern "C" void _1_ImGui_SetScrollHereY_(float center_y_ratio) { ::ImGui::SetScrollHereY(center_y_ratio); }
extern "C" void _1_ImGui_SetScrollFromPosX_(float local_x, float center_x_ratio) { ::ImGui::SetScrollFromPosX(local_x, center_x_ratio); }
extern "C" void _1_ImGui_SetScrollFromPosY_(float local_y, float center_y_ratio) { ::ImGui::SetScrollFromPosY(local_y, center_y_ratio); }
extern "C" void _1_ImGui_PushFont_(ImFont *font) { ::ImGui::PushFont(font); }
extern "C" void _1_ImGui_PopFont_() { ::ImGui::PopFont(); }
extern "C" void _1_ImGui_PushStyleColor_(ImGuiCol idx, ImU32 col) { ::ImGui::PushStyleColor(idx, col); }
extern "C" void _2_ImGui_PushStyleColor_(ImGuiCol idx, const ImVec4 &col) { ::ImGui::PushStyleColor(idx, col); }
extern "C" void _1_ImGui_PopStyleColor_(int count) { ::ImGui::PopStyleColor(count); }
extern "C" void _1_ImGui_PushStyleVar_(ImGuiStyleVar idx, float val) { ::ImGui::PushStyleVar(idx, val); }
extern "C" void _2_ImGui_PushStyleVar_(ImGuiStyleVar idx, const ImVec2 &val) { ::ImGui::PushStyleVar(idx, val); }
extern "C" void _1_ImGui_PopStyleVar_(int count) { ::ImGui::PopStyleVar(count); }
extern "C" void _1_ImGui_PushTabStop_(bool tab_stop) { ::ImGui::PushTabStop(tab_stop); }
extern "C" void _1_ImGui_PopTabStop_() { ::ImGui::PopTabStop(); }
extern "C" void _1_ImGui_PushButtonRepeat_(bool repeat) { ::ImGui::PushButtonRepeat(repeat); }
extern "C" void _1_ImGui_PopButtonRepeat_() { ::ImGui::PopButtonRepeat(); }
extern "C" void _1_ImGui_PushItemWidth_(float item_width) { ::ImGui::PushItemWidth(item_width); }
extern "C" void _1_ImGui_PopItemWidth_() { ::ImGui::PopItemWidth(); }
extern "C" void _1_ImGui_SetNextItemWidth_(float item_width) { ::ImGui::SetNextItemWidth(item_width); }
extern "C" float _1_ImGui_CalcItemWidth_() { return ::ImGui::CalcItemWidth(); }
extern "C" void _1_ImGui_PushTextWrapPos_(float wrap_local_pos_x) { ::ImGui::PushTextWrapPos(wrap_local_pos_x); }
extern "C" void _1_ImGui_PopTextWrapPos_() { ::ImGui::PopTextWrapPos(); }
extern "C" ImFont *_1_ImGui_GetFont_() { return ::ImGui::GetFont(); }
extern "C" float _1_ImGui_GetFontSize_() { return ::ImGui::GetFontSize(); }
extern "C" ImVec2 _1_ImGui_GetFontTexUvWhitePixel_() { return ::ImGui::GetFontTexUvWhitePixel(); }
extern "C" ImU32 _1_ImGui_GetColorU32_(ImGuiCol idx, float alpha_mul) { return ::ImGui::GetColorU32(idx, alpha_mul); }
extern "C" ImU32 _2_ImGui_GetColorU32_(const ImVec4 &col) { return ::ImGui::GetColorU32(col); }
extern "C" ImU32 _3_ImGui_GetColorU32_(ImU32 col) { return ::ImGui::GetColorU32(col); }
extern "C" const ImVec4 &_1_ImGui_GetStyleColorVec4_(ImGuiCol idx) { return ::ImGui::GetStyleColorVec4(idx); }
extern "C" void _1_ImGui_Separator_() { ::ImGui::Separator(); }
extern "C" void _1_ImGui_SameLine_(float offset_from_start_x, float spacing) { ::ImGui::SameLine(offset_from_start_x, spacing); }
extern "C" void _1_ImGui_NewLine_() { ::ImGui::NewLine(); }
extern "C" void _1_ImGui_Spacing_() { ::ImGui::Spacing(); }
extern "C" void _1_ImGui_Dummy_(const ImVec2 &size) { ::ImGui::Dummy(size); }
extern "C" void _1_ImGui_Indent_(float indent_w) { ::ImGui::Indent(indent_w); }
extern "C" void _1_ImGui_Unindent_(float indent_w) { ::ImGui::Unindent(indent_w); }
extern "C" void _1_ImGui_BeginGroup_() { ::ImGui::BeginGroup(); }
extern "C" void _1_ImGui_EndGroup_() { ::ImGui::EndGroup(); }
extern "C" ImVec2 _1_ImGui_GetCursorPos_() { return ::ImGui::GetCursorPos(); }
extern "C" float _1_ImGui_GetCursorPosX_() { return ::ImGui::GetCursorPosX(); }
extern "C" float _1_ImGui_GetCursorPosY_() { return ::ImGui::GetCursorPosY(); }
extern "C" void _1_ImGui_SetCursorPos_(const ImVec2 &local_pos) { ::ImGui::SetCursorPos(local_pos); }
extern "C" void _1_ImGui_SetCursorPosX_(float local_x) { ::ImGui::SetCursorPosX(local_x); }
extern "C" void _1_ImGui_SetCursorPosY_(float local_y) { ::ImGui::SetCursorPosY(local_y); }
extern "C" ImVec2 _1_ImGui_GetCursorStartPos_() { return ::ImGui::GetCursorStartPos(); }
extern "C" ImVec2 _1_ImGui_GetCursorScreenPos_() { return ::ImGui::GetCursorScreenPos(); }
extern "C" void _1_ImGui_SetCursorScreenPos_(const ImVec2 &pos) { ::ImGui::SetCursorScreenPos(pos); }
extern "C" void _1_ImGui_AlignTextToFramePadding_() { ::ImGui::AlignTextToFramePadding(); }
extern "C" float _1_ImGui_GetTextLineHeight_() { return ::ImGui::GetTextLineHeight(); }
extern "C" float _1_ImGui_GetTextLineHeightWithSpacing_() { return ::ImGui::GetTextLineHeightWithSpacing(); }
extern "C" float _1_ImGui_GetFrameHeight_() { return ::ImGui::GetFrameHeight(); }
extern "C" float _1_ImGui_GetFrameHeightWithSpacing_() { return ::ImGui::GetFrameHeightWithSpacing(); }
extern "C" void _1_ImGui_PushID_(const char *str_id) { ::ImGui::PushID(str_id); }
extern "C" void _2_ImGui_PushID_(const char *str_id_begin, const char *str_id_end) { ::ImGui::PushID(str_id_begin, str_id_end); }
extern "C" void _3_ImGui_PushID_(const void *ptr_id) { ::ImGui::PushID(ptr_id); }
extern "C" void _4_ImGui_PushID_(int int_id) { ::ImGui::PushID(int_id); }
extern "C" void _1_ImGui_PopID_() { ::ImGui::PopID(); }
extern "C" ImGuiID _1_ImGui_GetID_(const char *str_id) { return ::ImGui::GetID(str_id); }
extern "C" ImGuiID _2_ImGui_GetID_(const char *str_id_begin, const char *str_id_end) { return ::ImGui::GetID(str_id_begin, str_id_end); }
extern "C" ImGuiID _3_ImGui_GetID_(const void *ptr_id) { return ::ImGui::GetID(ptr_id); }
extern "C" void _1_ImGui_TextUnformatted_(const char *text, const char *text_end) { ::ImGui::TextUnformatted(text, text_end); }
extern "C" void _1_ImGui_TextV_(const char *fmt, va_list args) { ::ImGui::TextV(fmt, args); }
extern "C" void _1_ImGui_TextV_VA_(const char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    _1_ImGui_TextV_(fmt, args);
    va_end(args);
}
extern "C" void _1_ImGui_TextColoredV_(const ImVec4 &col, const char *fmt, va_list args) { ::ImGui::TextColoredV(col, fmt, args); }
extern "C" void _1_ImGui_TextDisabledV_(const char *fmt, va_list args) { ::ImGui::TextDisabledV(fmt, args); }
extern "C" void _1_ImGui_TextWrappedV_(const char *fmt, va_list args) { ::ImGui::TextWrappedV(fmt, args); }
extern "C" void _1_ImGui_LabelTextV_(const char *label, const char *fmt, va_list args) { ::ImGui::LabelTextV(label, fmt, args); }
extern "C" void _1_ImGui_BulletTextV_(const char *fmt, va_list args) { ::ImGui::BulletTextV(fmt, args); }
extern "C" void _1_ImGui_SeparatorText_(const char *label) { ::ImGui::SeparatorText(label); }
extern "C" bool _1_ImGui_Button_(const char *label, const ImVec2 &size) { return ::ImGui::Button(label, size); }
extern "C" bool _1_ImGui_SmallButton_(const char *label) { return ::ImGui::SmallButton(label); }
extern "C" bool _1_ImGui_InvisibleButton_(const char *str_id, const ImVec2 &size, ImGuiButtonFlags flags) { return ::ImGui::InvisibleButton(str_id, size, flags); }
extern "C" bool _1_ImGui_ArrowButton_(const char *str_id, ImGuiDir dir) { return ::ImGui::ArrowButton(str_id, dir); }
extern "C" bool _1_ImGui_Checkbox_(const char *label, bool *v) { return ::ImGui::Checkbox(label, v); }
extern "C" bool _1_ImGui_CheckboxFlags_(const char *label, int *flags, int flags_value) { return ::ImGui::CheckboxFlags(label, flags, flags_value); }
extern "C" bool _2_ImGui_CheckboxFlags_(const char *label, unsigned int *flags, unsigned int flags_value) { return ::ImGui::CheckboxFlags(label, flags, flags_value); }
extern "C" bool _1_ImGui_RadioButton_(const char *label, bool active) { return ::ImGui::RadioButton(label, active); }
extern "C" bool _2_ImGui_RadioButton_(const char *label, int *v, int v_button) { return ::ImGui::RadioButton(label, v, v_button); }
extern "C" void _1_ImGui_ProgressBar_(float fraction, const ImVec2 &size_arg, const char *overlay) { ::ImGui::ProgressBar(fraction, size_arg, overlay); }
extern "C" void _1_ImGui_Bullet_() { ::ImGui::Bullet(); }
extern "C" void _1_ImGui_Image_(ImTextureID user_texture_id, const ImVec2 &size, const ImVec2 &uv0, const ImVec2 &uv1, const ImVec4 &tint_col, const ImVec4 &border_col) { ::ImGui::Image(user_texture_id, size, uv0, uv1, tint_col, border_col); }
extern "C" bool _1_ImGui_ImageButton_(const char *str_id, ImTextureID user_texture_id, const ImVec2 &size, const ImVec2 &uv0, const ImVec2 &uv1, const ImVec4 &bg_col, const ImVec4 &tint_col) { return ::ImGui::ImageButton(str_id, user_texture_id, size, uv0, uv1, bg_col, tint_col); }
extern "C" bool _1_ImGui_BeginCombo_(const char *label, const char *preview_value, ImGuiComboFlags flags) { return ::ImGui::BeginCombo(label, preview_value, flags); }
extern "C" void _1_ImGui_EndCombo_() { ::ImGui::EndCombo(); }
extern "C" bool _1_ImGui_Combo_(const char *label, int *current_item, const char *const *items, int items_count, int popup_max_height_in_items) { return ::ImGui::Combo(label, current_item, items, items_count, popup_max_height_in_items); }
extern "C" bool _2_ImGui_Combo_(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items) { return ::ImGui::Combo(label, current_item, items_separated_by_zeros, popup_max_height_in_items); }
extern "C" bool _3_ImGui_Combo_(const char *label, int *current_item, bool (*items_getter)(void *, int, const char **), void *data, int items_count, int popup_max_height_in_items) { return ::ImGui::Combo(label, current_item, items_getter, data, items_count, popup_max_height_in_items); }
extern "C" bool _1_ImGui_DragFloat_(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragFloat(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragFloat2_(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragFloat2(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragFloat3_(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragFloat3(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragFloat4_(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragFloat4(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragFloatRange2_(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *format, const char *format_max, ImGuiSliderFlags flags) { return ::ImGui::DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags); }
extern "C" bool _1_ImGui_DragInt_(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragInt(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragInt2_(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragInt2(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragInt3_(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragInt3(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragInt4_(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragInt4(label, v, v_speed, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_DragIntRange2_(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *format, const char *format_max, ImGuiSliderFlags flags) { return ::ImGui::DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags); }
extern "C" bool _1_ImGui_DragScalar_(const char *label, ImGuiDataType data_type, void *p_data, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, flags); }
extern "C" bool _1_ImGui_DragScalarN_(const char *label, ImGuiDataType data_type, void *p_data, int components, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags); }
extern "C" bool _1_ImGui_SliderFloat_(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderFloat(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderFloat2_(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderFloat2(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderFloat3_(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderFloat3(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderFloat4_(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderFloat4(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderAngle_(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags); }
extern "C" bool _1_ImGui_SliderInt_(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderInt(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderInt2_(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderInt2(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderInt3_(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderInt3(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderInt4_(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderInt4(label, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_SliderScalar_(const char *label, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderScalar(label, data_type, p_data, p_min, p_max, format, flags); }
extern "C" bool _1_ImGui_SliderScalarN_(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, flags); }
extern "C" bool _1_ImGui_VSliderFloat_(const char *label, const ImVec2 &size, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::VSliderFloat(label, size, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_VSliderInt_(const char *label, const ImVec2 &size, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::VSliderInt(label, size, v, v_min, v_max, format, flags); }
extern "C" bool _1_ImGui_VSliderScalar_(const char *label, const ImVec2 &size, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags) { return ::ImGui::VSliderScalar(label, size, data_type, p_data, p_min, p_max, format, flags); }
extern "C" bool _1_ImGui_InputText_(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data) { return ::ImGui::InputText(label, buf, buf_size, flags, callback, user_data); }
extern "C" bool _1_ImGui_InputTextMultiline_(const char *label, char *buf, size_t buf_size, const ImVec2 &size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data) { return ::ImGui::InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data); }
extern "C" bool _1_ImGui_InputTextWithHint_(const char *label, const char *hint, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data) { return ::ImGui::InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data); }
extern "C" bool _1_ImGui_InputFloat_(const char *label, float *v, float step, float step_fast, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputFloat(label, v, step, step_fast, format, flags); }
extern "C" bool _1_ImGui_InputFloat2_(const char *label, float *v, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputFloat2(label, v, format, flags); }
extern "C" bool _1_ImGui_InputFloat3_(const char *label, float *v, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputFloat3(label, v, format, flags); }
extern "C" bool _1_ImGui_InputFloat4_(const char *label, float *v, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputFloat4(label, v, format, flags); }
extern "C" bool _1_ImGui_InputInt_(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags flags) { return ::ImGui::InputInt(label, v, step, step_fast, flags); }
extern "C" bool _1_ImGui_InputInt2_(const char *label, int *v, ImGuiInputTextFlags flags) { return ::ImGui::InputInt2(label, v, flags); }
extern "C" bool _1_ImGui_InputInt3_(const char *label, int *v, ImGuiInputTextFlags flags) { return ::ImGui::InputInt3(label, v, flags); }
extern "C" bool _1_ImGui_InputInt4_(const char *label, int *v, ImGuiInputTextFlags flags) { return ::ImGui::InputInt4(label, v, flags); }
extern "C" bool _1_ImGui_InputDouble_(const char *label, double *v, double step, double step_fast, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputDouble(label, v, step, step_fast, format, flags); }
extern "C" bool _1_ImGui_InputScalar_(const char *label, ImGuiDataType data_type, void *p_data, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags); }
extern "C" bool _1_ImGui_InputScalarN_(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags) { return ::ImGui::InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags); }
extern "C" bool _1_ImGui_ColorEdit3_(const char *label, float *col, ImGuiColorEditFlags flags) { return ::ImGui::ColorEdit3(label, col, flags); }
extern "C" bool _1_ImGui_ColorEdit4_(const char *label, float *col, ImGuiColorEditFlags flags) { return ::ImGui::ColorEdit4(label, col, flags); }
extern "C" bool _1_ImGui_ColorPicker3_(const char *label, float *col, ImGuiColorEditFlags flags) { return ::ImGui::ColorPicker3(label, col, flags); }
extern "C" bool _1_ImGui_ColorPicker4_(const char *label, float *col, ImGuiColorEditFlags flags, const float *ref_col) { return ::ImGui::ColorPicker4(label, col, flags, ref_col); }
extern "C" bool _1_ImGui_ColorButton_(const char *desc_id, const ImVec4 &col, ImGuiColorEditFlags flags, const ImVec2 &size) { return ::ImGui::ColorButton(desc_id, col, flags, size); }
extern "C" void _1_ImGui_SetColorEditOptions_(ImGuiColorEditFlags flags) { ::ImGui::SetColorEditOptions(flags); }
extern "C" bool _1_ImGui_TreeNode_(const char *label) { return ::ImGui::TreeNode(label); }
extern "C" bool _1_ImGui_TreeNodeV_(const char *str_id, const char *fmt, va_list args) { return ::ImGui::TreeNodeV(str_id, fmt, args); }
extern "C" bool _2_ImGui_TreeNodeV_(const void *ptr_id, const char *fmt, va_list args) { return ::ImGui::TreeNodeV(ptr_id, fmt, args); }
extern "C" bool _1_ImGui_TreeNodeEx_(const char *label, ImGuiTreeNodeFlags flags) { return ::ImGui::TreeNodeEx(label, flags); }
extern "C" bool _1_ImGui_TreeNodeExV_(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args) { return ::ImGui::TreeNodeExV(str_id, flags, fmt, args); }
extern "C" bool _2_ImGui_TreeNodeExV_(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args) { return ::ImGui::TreeNodeExV(ptr_id, flags, fmt, args); }
extern "C" void _1_ImGui_TreePush_(const char *str_id) { ::ImGui::TreePush(str_id); }
extern "C" void _2_ImGui_TreePush_(const void *ptr_id) { ::ImGui::TreePush(ptr_id); }
extern "C" void _1_ImGui_TreePop_() { ::ImGui::TreePop(); }
extern "C" float _1_ImGui_GetTreeNodeToLabelSpacing_() { return ::ImGui::GetTreeNodeToLabelSpacing(); }
extern "C" bool _1_ImGui_CollapsingHeader_(const char *label, ImGuiTreeNodeFlags flags) { return ::ImGui::CollapsingHeader(label, flags); }
extern "C" bool _2_ImGui_CollapsingHeader_(const char *label, bool *p_visible, ImGuiTreeNodeFlags flags) { return ::ImGui::CollapsingHeader(label, p_visible, flags); }
extern "C" void _1_ImGui_SetNextItemOpen_(bool is_open, ImGuiCond cond) { ::ImGui::SetNextItemOpen(is_open, cond); }
extern "C" bool _1_ImGui_Selectable_(const char *label, bool selected, ImGuiSelectableFlags flags, const ImVec2 &size) { return ::ImGui::Selectable(label, selected, flags, size); }
extern "C" bool _2_ImGui_Selectable_(const char *label, bool *p_selected, ImGuiSelectableFlags flags, const ImVec2 &size) { return ::ImGui::Selectable(label, p_selected, flags, size); }
extern "C" bool _1_ImGui_BeginListBox_(const char *label, const ImVec2 &size) { return ::ImGui::BeginListBox(label, size); }
extern "C" void _1_ImGui_EndListBox_() { ::ImGui::EndListBox(); }
extern "C" bool _1_ImGui_ListBox_(const char *label, int *current_item, const char *const *items, int items_count, int height_in_items) { return ::ImGui::ListBox(label, current_item, items, items_count, height_in_items); }
extern "C" bool _2_ImGui_ListBox_(const char *label, int *current_item, bool (*items_getter)(void *, int, const char **), void *data, int items_count, int height_in_items) { return ::ImGui::ListBox(label, current_item, items_getter, data, items_count, height_in_items); }
extern "C" void _1_ImGui_PlotLines_(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) { ::ImGui::PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride); }
extern "C" void _2_ImGui_PlotLines_(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size) { ::ImGui::PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size); }
extern "C" void _1_ImGui_PlotHistogram_(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride) { ::ImGui::PlotHistogram(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride); }
extern "C" void _2_ImGui_PlotHistogram_(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size) { ::ImGui::PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size); }
extern "C" void _1_ImGui_Value_(const char *prefix, bool b) { ::ImGui::Value(prefix, b); }
extern "C" void _2_ImGui_Value_(const char *prefix, int v) { ::ImGui::Value(prefix, v); }
extern "C" void _3_ImGui_Value_(const char *prefix, unsigned int v) { ::ImGui::Value(prefix, v); }
extern "C" void _4_ImGui_Value_(const char *prefix, float v, const char *float_format) { ::ImGui::Value(prefix, v, float_format); }
extern "C" bool _1_ImGui_BeginMenuBar_() { return ::ImGui::BeginMenuBar(); }
extern "C" void _1_ImGui_EndMenuBar_() { ::ImGui::EndMenuBar(); }
extern "C" bool _1_ImGui_BeginMainMenuBar_() { return ::ImGui::BeginMainMenuBar(); }
extern "C" void _1_ImGui_EndMainMenuBar_() { ::ImGui::EndMainMenuBar(); }
extern "C" bool _1_ImGui_BeginMenu_(const char *label, bool enabled) { return ::ImGui::BeginMenu(label, enabled); }
extern "C" void _1_ImGui_EndMenu_() { ::ImGui::EndMenu(); }
extern "C" bool _1_ImGui_MenuItem_(const char *label, const char *shortcut, bool selected, bool enabled) { return ::ImGui::MenuItem(label, shortcut, selected, enabled); }
extern "C" bool _2_ImGui_MenuItem_(const char *label, const char *shortcut, bool *p_selected, bool enabled) { return ::ImGui::MenuItem(label, shortcut, p_selected, enabled); }
extern "C" bool _1_ImGui_BeginTooltip_() { return ::ImGui::BeginTooltip(); }
extern "C" void _1_ImGui_EndTooltip_() { ::ImGui::EndTooltip(); }
extern "C" void _1_ImGui_SetTooltipV_(const char *fmt, va_list args) { ::ImGui::SetTooltipV(fmt, args); }
extern "C" bool _1_ImGui_BeginPopup_(const char *str_id, ImGuiWindowFlags flags) { return ::ImGui::BeginPopup(str_id, flags); }
extern "C" bool _1_ImGui_BeginPopupModal_(const char *name, bool *p_open, ImGuiWindowFlags flags) { return ::ImGui::BeginPopupModal(name, p_open, flags); }
extern "C" void _1_ImGui_EndPopup_() { ::ImGui::EndPopup(); }
extern "C" void _1_ImGui_OpenPopup_(const char *str_id, ImGuiPopupFlags popup_flags) { ::ImGui::OpenPopup(str_id, popup_flags); }
extern "C" void _2_ImGui_OpenPopup_(ImGuiID id, ImGuiPopupFlags popup_flags) { ::ImGui::OpenPopup(id, popup_flags); }
extern "C" void _1_ImGui_OpenPopupOnItemClick_(const char *str_id, ImGuiPopupFlags popup_flags) { ::ImGui::OpenPopupOnItemClick(str_id, popup_flags); }
extern "C" void _1_ImGui_CloseCurrentPopup_() { ::ImGui::CloseCurrentPopup(); }
extern "C" bool _1_ImGui_BeginPopupContextItem_(const char *str_id, ImGuiPopupFlags popup_flags) { return ::ImGui::BeginPopupContextItem(str_id, popup_flags); }
extern "C" bool _1_ImGui_BeginPopupContextWindow_(const char *str_id, ImGuiPopupFlags popup_flags) { return ::ImGui::BeginPopupContextWindow(str_id, popup_flags); }
extern "C" bool _1_ImGui_BeginPopupContextVoid_(const char *str_id, ImGuiPopupFlags popup_flags) { return ::ImGui::BeginPopupContextVoid(str_id, popup_flags); }
extern "C" bool _1_ImGui_IsPopupOpen_(const char *str_id, ImGuiPopupFlags flags) { return ::ImGui::IsPopupOpen(str_id, flags); }
extern "C" bool _1_ImGui_BeginTable_(const char *str_id, int column, ImGuiTableFlags flags, const ImVec2 &outer_size, float inner_width) { return ::ImGui::BeginTable(str_id, column, flags, outer_size, inner_width); }
extern "C" void _1_ImGui_EndTable_() { ::ImGui::EndTable(); }
extern "C" void _1_ImGui_TableNextRow_(ImGuiTableRowFlags row_flags, float min_row_height) { ::ImGui::TableNextRow(row_flags, min_row_height); }
extern "C" bool _1_ImGui_TableNextColumn_() { return ::ImGui::TableNextColumn(); }
extern "C" bool _1_ImGui_TableSetColumnIndex_(int column_n) { return ::ImGui::TableSetColumnIndex(column_n); }
extern "C" void _1_ImGui_TableSetupColumn_(const char *label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id) { ::ImGui::TableSetupColumn(label, flags, init_width_or_weight, user_id); }
extern "C" void _1_ImGui_TableSetupScrollFreeze_(int cols, int rows) { ::ImGui::TableSetupScrollFreeze(cols, rows); }
extern "C" void _1_ImGui_TableHeadersRow_() { ::ImGui::TableHeadersRow(); }
extern "C" void _1_ImGui_TableHeader_(const char *label) { ::ImGui::TableHeader(label); }
extern "C" ImGuiTableSortSpecs *_1_ImGui_TableGetSortSpecs_() { return ::ImGui::TableGetSortSpecs(); }
extern "C" int _1_ImGui_TableGetColumnCount_() { return ::ImGui::TableGetColumnCount(); }
extern "C" int _1_ImGui_TableGetColumnIndex_() { return ::ImGui::TableGetColumnIndex(); }
extern "C" int _1_ImGui_TableGetRowIndex_() { return ::ImGui::TableGetRowIndex(); }
extern "C" const char *_1_ImGui_TableGetColumnName_(int column_n) { return ::ImGui::TableGetColumnName(column_n); }
extern "C" ImGuiTableColumnFlags _1_ImGui_TableGetColumnFlags_(int column_n) { return ::ImGui::TableGetColumnFlags(column_n); }
extern "C" void _1_ImGui_TableSetColumnEnabled_(int column_n, bool v) { ::ImGui::TableSetColumnEnabled(column_n, v); }
extern "C" void _1_ImGui_TableSetBgColor_(ImGuiTableBgTarget target, ImU32 color, int column_n) { ::ImGui::TableSetBgColor(target, color, column_n); }
extern "C" void _1_ImGui_Columns_(int count, const char *id, bool border) { ::ImGui::Columns(count, id, border); }
extern "C" void _1_ImGui_NextColumn_() { ::ImGui::NextColumn(); }
extern "C" int _1_ImGui_GetColumnIndex_() { return ::ImGui::GetColumnIndex(); }
extern "C" float _1_ImGui_GetColumnWidth_(int column_index) { return ::ImGui::GetColumnWidth(column_index); }
extern "C" void _1_ImGui_SetColumnWidth_(int column_index, float width) { ::ImGui::SetColumnWidth(column_index, width); }
extern "C" float _1_ImGui_GetColumnOffset_(int column_index) { return ::ImGui::GetColumnOffset(column_index); }
extern "C" void _1_ImGui_SetColumnOffset_(int column_index, float offset_x) { ::ImGui::SetColumnOffset(column_index, offset_x); }
extern "C" int _1_ImGui_GetColumnsCount_() { return ::ImGui::GetColumnsCount(); }
extern "C" bool _1_ImGui_BeginTabBar_(const char *str_id, ImGuiTabBarFlags flags) { return ::ImGui::BeginTabBar(str_id, flags); }
extern "C" void _1_ImGui_EndTabBar_() { ::ImGui::EndTabBar(); }
extern "C" bool _1_ImGui_BeginTabItem_(const char *label, bool *p_open, ImGuiTabItemFlags flags) { return ::ImGui::BeginTabItem(label, p_open, flags); }
extern "C" void _1_ImGui_EndTabItem_() { ::ImGui::EndTabItem(); }
extern "C" bool _1_ImGui_TabItemButton_(const char *label, ImGuiTabItemFlags flags) { return ::ImGui::TabItemButton(label, flags); }
extern "C" void _1_ImGui_SetTabItemClosed_(const char *tab_or_docked_window_label) { ::ImGui::SetTabItemClosed(tab_or_docked_window_label); }
extern "C" void _1_ImGui_LogToTTY_(int auto_open_depth) { ::ImGui::LogToTTY(auto_open_depth); }
extern "C" void _1_ImGui_LogToFile_(int auto_open_depth, const char *filename) { ::ImGui::LogToFile(auto_open_depth, filename); }
extern "C" void _1_ImGui_LogToClipboard_(int auto_open_depth) { ::ImGui::LogToClipboard(auto_open_depth); }
extern "C" void _1_ImGui_LogFinish_() { ::ImGui::LogFinish(); }
extern "C" void _1_ImGui_LogButtons_() { ::ImGui::LogButtons(); }
extern "C" void _1_ImGui_LogTextV_(const char *fmt, va_list args) { ::ImGui::LogTextV(fmt, args); }
extern "C" bool _1_ImGui_BeginDragDropSource_(ImGuiDragDropFlags flags) { return ::ImGui::BeginDragDropSource(flags); }
extern "C" bool _1_ImGui_SetDragDropPayload_(const char *type, const void *data, size_t sz, ImGuiCond cond) { return ::ImGui::SetDragDropPayload(type, data, sz, cond); }
extern "C" void _1_ImGui_EndDragDropSource_() { ::ImGui::EndDragDropSource(); }
extern "C" bool _1_ImGui_BeginDragDropTarget_() { return ::ImGui::BeginDragDropTarget(); }
extern "C" const ImGuiPayload *_1_ImGui_AcceptDragDropPayload_(const char *type, ImGuiDragDropFlags flags) { return ::ImGui::AcceptDragDropPayload(type, flags); }
extern "C" void _1_ImGui_EndDragDropTarget_() { ::ImGui::EndDragDropTarget(); }
extern "C" const ImGuiPayload *_1_ImGui_GetDragDropPayload_() { return ::ImGui::GetDragDropPayload(); }
extern "C" void _1_ImGui_BeginDisabled_(bool disabled) { ::ImGui::BeginDisabled(disabled); }
extern "C" void _1_ImGui_EndDisabled_() { ::ImGui::EndDisabled(); }
extern "C" void _1_ImGui_PushClipRect_(const ImVec2 &clip_rect_min, const ImVec2 &clip_rect_max, bool intersect_with_current_clip_rect) { ::ImGui::PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect); }
extern "C" void _1_ImGui_PopClipRect_() { ::ImGui::PopClipRect(); }
extern "C" void _1_ImGui_SetItemDefaultFocus_() { ::ImGui::SetItemDefaultFocus(); }
extern "C" void _1_ImGui_SetKeyboardFocusHere_(int offset) { ::ImGui::SetKeyboardFocusHere(offset); }
extern "C" bool _1_ImGui_IsItemHovered_(ImGuiHoveredFlags flags) { return ::ImGui::IsItemHovered(flags); }
extern "C" bool _1_ImGui_IsItemActive_() { return ::ImGui::IsItemActive(); }
extern "C" bool _1_ImGui_IsItemFocused_() { return ::ImGui::IsItemFocused(); }
extern "C" bool _1_ImGui_IsItemClicked_(ImGuiMouseButton mouse_button) { return ::ImGui::IsItemClicked(mouse_button); }
extern "C" bool _1_ImGui_IsItemVisible_() { return ::ImGui::IsItemVisible(); }
extern "C" bool _1_ImGui_IsItemEdited_() { return ::ImGui::IsItemEdited(); }
extern "C" bool _1_ImGui_IsItemActivated_() { return ::ImGui::IsItemActivated(); }
extern "C" bool _1_ImGui_IsItemDeactivated_() { return ::ImGui::IsItemDeactivated(); }
extern "C" bool _1_ImGui_IsItemDeactivatedAfterEdit_() { return ::ImGui::IsItemDeactivatedAfterEdit(); }
extern "C" bool _1_ImGui_IsItemToggledOpen_() { return ::ImGui::IsItemToggledOpen(); }
extern "C" bool _1_ImGui_IsAnyItemHovered_() { return ::ImGui::IsAnyItemHovered(); }
extern "C" bool _1_ImGui_IsAnyItemActive_() { return ::ImGui::IsAnyItemActive(); }
extern "C" bool _1_ImGui_IsAnyItemFocused_() { return ::ImGui::IsAnyItemFocused(); }
extern "C" ImGuiID _1_ImGui_GetItemID_() { return ::ImGui::GetItemID(); }
extern "C" ImVec2 _1_ImGui_GetItemRectMin_() { return ::ImGui::GetItemRectMin(); }
extern "C" ImVec2 _1_ImGui_GetItemRectMax_() { return ::ImGui::GetItemRectMax(); }
extern "C" ImVec2 _1_ImGui_GetItemRectSize_() { return ::ImGui::GetItemRectSize(); }
extern "C" void _1_ImGui_SetItemAllowOverlap_() { ::ImGui::SetItemAllowOverlap(); }
extern "C" ImGuiViewport *_1_ImGui_GetMainViewport_() { return ::ImGui::GetMainViewport(); }
extern "C" ImDrawList *_1_ImGui_GetBackgroundDrawList_() { return ::ImGui::GetBackgroundDrawList(); }
extern "C" ImDrawList *_1_ImGui_GetForegroundDrawList_() { return ::ImGui::GetForegroundDrawList(); }
extern "C" bool _1_ImGui_IsRectVisible_(const ImVec2 &size) { return ::ImGui::IsRectVisible(size); }
extern "C" bool _2_ImGui_IsRectVisible_(const ImVec2 &rect_min, const ImVec2 &rect_max) { return ::ImGui::IsRectVisible(rect_min, rect_max); }
extern "C" double _1_ImGui_GetTime_() { return ::ImGui::GetTime(); }
extern "C" int _1_ImGui_GetFrameCount_() { return ::ImGui::GetFrameCount(); }
extern "C" ImDrawListSharedData *_1_ImGui_GetDrawListSharedData_() { return ::ImGui::GetDrawListSharedData(); }
extern "C" const char *_1_ImGui_GetStyleColorName_(ImGuiCol idx) { return ::ImGui::GetStyleColorName(idx); }
extern "C" void _1_ImGui_SetStateStorage_(ImGuiStorage *storage) { ::ImGui::SetStateStorage(storage); }
extern "C" ImGuiStorage *_1_ImGui_GetStateStorage_() { return ::ImGui::GetStateStorage(); }
extern "C" bool _1_ImGui_BeginChildFrame_(ImGuiID id, const ImVec2 &size, ImGuiWindowFlags flags) { return ::ImGui::BeginChildFrame(id, size, flags); }
extern "C" void _1_ImGui_EndChildFrame_() { ::ImGui::EndChildFrame(); }
extern "C" ImVec2 _1_ImGui_CalcTextSize_(const char *text, const char *text_end, bool hide_text_after_double_hash, float wrap_width) { return ::ImGui::CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width); }
extern "C" ImVec4 _1_ImGui_ColorConvertU32ToFloat4_(ImU32 in) { return ::ImGui::ColorConvertU32ToFloat4(in); }
extern "C" ImU32 _1_ImGui_ColorConvertFloat4ToU32_(const ImVec4 &in) { return ::ImGui::ColorConvertFloat4ToU32(in); }
extern "C" void _1_ImGui_ColorConvertRGBtoHSV_(float r, float g, float b, float &out_h, float &out_s, float &out_v) { ::ImGui::ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }
extern "C" void _1_ImGui_ColorConvertHSVtoRGB_(float h, float s, float v, float &out_r, float &out_g, float &out_b) { ::ImGui::ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }
extern "C" bool _1_ImGui_IsKeyDown_(ImGuiKey key) { return ::ImGui::IsKeyDown(key); }
extern "C" bool _1_ImGui_IsKeyPressed_(ImGuiKey key, bool repeat) { return ::ImGui::IsKeyPressed(key, repeat); }
extern "C" bool _1_ImGui_IsKeyReleased_(ImGuiKey key) { return ::ImGui::IsKeyReleased(key); }
extern "C" int _1_ImGui_GetKeyPressedAmount_(ImGuiKey key, float repeat_delay, float rate) { return ::ImGui::GetKeyPressedAmount(key, repeat_delay, rate); }
extern "C" const char *_1_ImGui_GetKeyName_(ImGuiKey key) { return ::ImGui::GetKeyName(key); }
extern "C" void _1_ImGui_SetNextFrameWantCaptureKeyboard_(bool want_capture_keyboard) { ::ImGui::SetNextFrameWantCaptureKeyboard(want_capture_keyboard); }
extern "C" bool _1_ImGui_IsMouseDown_(ImGuiMouseButton button) { return ::ImGui::IsMouseDown(button); }
extern "C" bool _1_ImGui_IsMouseClicked_(ImGuiMouseButton button, bool repeat) { return ::ImGui::IsMouseClicked(button, repeat); }
extern "C" bool _1_ImGui_IsMouseReleased_(ImGuiMouseButton button) { return ::ImGui::IsMouseReleased(button); }
extern "C" bool _1_ImGui_IsMouseDoubleClicked_(ImGuiMouseButton button) { return ::ImGui::IsMouseDoubleClicked(button); }
extern "C" int _1_ImGui_GetMouseClickedCount_(ImGuiMouseButton button) { return ::ImGui::GetMouseClickedCount(button); }
extern "C" bool _1_ImGui_IsMouseHoveringRect_(const ImVec2 &r_min, const ImVec2 &r_max, bool clip) { return ::ImGui::IsMouseHoveringRect(r_min, r_max, clip); }
extern "C" bool _1_ImGui_IsMousePosValid_(const ImVec2 *mouse_pos) { return ::ImGui::IsMousePosValid(mouse_pos); }
extern "C" bool _1_ImGui_IsAnyMouseDown_() { return ::ImGui::IsAnyMouseDown(); }
extern "C" ImVec2 _1_ImGui_GetMousePos_() { return ::ImGui::GetMousePos(); }
extern "C" ImVec2 _1_ImGui_GetMousePosOnOpeningCurrentPopup_() { return ::ImGui::GetMousePosOnOpeningCurrentPopup(); }
extern "C" bool _1_ImGui_IsMouseDragging_(ImGuiMouseButton button, float lock_threshold) { return ::ImGui::IsMouseDragging(button, lock_threshold); }
extern "C" ImVec2 _1_ImGui_GetMouseDragDelta_(ImGuiMouseButton button, float lock_threshold) { return ::ImGui::GetMouseDragDelta(button, lock_threshold); }
extern "C" void _1_ImGui_ResetMouseDragDelta_(ImGuiMouseButton button) { ::ImGui::ResetMouseDragDelta(button); }
extern "C" ImGuiMouseCursor _1_ImGui_GetMouseCursor_() { return ::ImGui::GetMouseCursor(); }
extern "C" void _1_ImGui_SetMouseCursor_(ImGuiMouseCursor cursor_type) { ::ImGui::SetMouseCursor(cursor_type); }
extern "C" void _1_ImGui_SetNextFrameWantCaptureMouse_(bool want_capture_mouse) { ::ImGui::SetNextFrameWantCaptureMouse(want_capture_mouse); }
extern "C" const char *_1_ImGui_GetClipboardText_() { return ::ImGui::GetClipboardText(); }
extern "C" void _1_ImGui_SetClipboardText_(const char *text) { ::ImGui::SetClipboardText(text); }
extern "C" void _1_ImGui_LoadIniSettingsFromDisk_(const char *ini_filename) { ::ImGui::LoadIniSettingsFromDisk(ini_filename); }
extern "C" void _1_ImGui_LoadIniSettingsFromMemory_(const char *ini_data, size_t ini_size) { ::ImGui::LoadIniSettingsFromMemory(ini_data, ini_size); }
extern "C" void _1_ImGui_SaveIniSettingsToDisk_(const char *ini_filename) { ::ImGui::SaveIniSettingsToDisk(ini_filename); }
extern "C" const char *_1_ImGui_SaveIniSettingsToMemory_(size_t *out_ini_size) { return ::ImGui::SaveIniSettingsToMemory(out_ini_size); }
extern "C" void _1_ImGui_DebugTextEncoding_(const char *text) { ::ImGui::DebugTextEncoding(text); }
extern "C" bool _1_ImGui_DebugCheckVersionAndDataLayout_(const char *version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx) { return ::ImGui::DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx); }
extern "C" void _1_ImGui_SetAllocatorFunctions_(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void *user_data) { ::ImGui::SetAllocatorFunctions(alloc_func, free_func, user_data); }
extern "C" void _1_ImGui_GetAllocatorFunctions_(ImGuiMemAllocFunc *p_alloc_func, ImGuiMemFreeFunc *p_free_func, void **p_user_data) { ::ImGui::GetAllocatorFunctions(p_alloc_func, p_free_func, p_user_data); }
extern "C" void *_1_ImGui_MemAlloc_(size_t size) { return ::ImGui::MemAlloc(size); }
extern "C" void _1_ImGui_MemFree_(void *ptr) { ::ImGui::MemFree(ptr); }
extern "C" ::ImGuiStyle _1_ImGuiStyle_init_() { return ::ImGuiStyle(); }
extern "C" void _1_ImGuiStyle_ScaleAllSizes_(::ImGuiStyle *self, float scale_factor) { self->ScaleAllSizes(scale_factor); }
extern "C" void _1_ImGuiIO_AddKeyEvent_(::ImGuiIO *self, ImGuiKey key, bool down) { self->AddKeyEvent(key, down); }
extern "C" void _1_ImGuiIO_AddKeyAnalogEvent_(::ImGuiIO *self, ImGuiKey key, bool down, float v) { self->AddKeyAnalogEvent(key, down, v); }
extern "C" void _1_ImGuiIO_AddMousePosEvent_(::ImGuiIO *self, float x, float y) { self->AddMousePosEvent(x, y); }
extern "C" void _1_ImGuiIO_AddMouseButtonEvent_(::ImGuiIO *self, int button, bool down) { self->AddMouseButtonEvent(button, down); }
extern "C" void _1_ImGuiIO_AddMouseWheelEvent_(::ImGuiIO *self, float wheel_x, float wheel_y) { self->AddMouseWheelEvent(wheel_x, wheel_y); }
extern "C" void _1_ImGuiIO_AddMouseSourceEvent_(::ImGuiIO *self, ImGuiMouseSource source) { self->AddMouseSourceEvent(source); }
extern "C" void _1_ImGuiIO_AddFocusEvent_(::ImGuiIO *self, bool focused) { self->AddFocusEvent(focused); }
extern "C" void _1_ImGuiIO_AddInputCharacter_(::ImGuiIO *self, unsigned int c) { self->AddInputCharacter(c); }
extern "C" void _1_ImGuiIO_AddInputCharacterUTF16_(::ImGuiIO *self, ImWchar16 c) { self->AddInputCharacterUTF16(c); }
extern "C" void _1_ImGuiIO_AddInputCharactersUTF8_(::ImGuiIO *self, const char *str) { self->AddInputCharactersUTF8(str); }
extern "C" void _1_ImGuiIO_SetKeyEventNativeData_(::ImGuiIO *self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index) { self->SetKeyEventNativeData(key, native_keycode, native_scancode, native_legacy_index); }
extern "C" void _1_ImGuiIO_SetAppAcceptingEvents_(::ImGuiIO *self, bool accepting_events) { self->SetAppAcceptingEvents(accepting_events); }
extern "C" void _1_ImGuiIO_ClearInputCharacters_(::ImGuiIO *self) { self->ClearInputCharacters(); }
extern "C" void _1_ImGuiIO_ClearInputKeys_(::ImGuiIO *self) { self->ClearInputKeys(); }
extern "C" ::ImGuiIO _1_ImGuiIO_init_() { return ::ImGuiIO(); }
extern "C" ::ImGuiInputTextCallbackData _1_ImGuiInputTextCallbackData_init_() { return ::ImGuiInputTextCallbackData(); }
extern "C" void _1_ImGuiInputTextCallbackData_DeleteChars_(::ImGuiInputTextCallbackData *self, int pos, int bytes_count) { self->DeleteChars(pos, bytes_count); }
extern "C" void _1_ImGuiInputTextCallbackData_InsertChars_(::ImGuiInputTextCallbackData *self, int pos, const char *text, const char *text_end) { self->InsertChars(pos, text, text_end); }
extern "C" ::ImGuiPayload _1_ImGuiPayload_init_() { return ::ImGuiPayload(); }
extern "C" ::ImGuiTableColumnSortSpecs _1_ImGuiTableColumnSortSpecs_init_() { return ::ImGuiTableColumnSortSpecs(); }
extern "C" ::ImGuiTableSortSpecs _1_ImGuiTableSortSpecs_init_() { return ::ImGuiTableSortSpecs(); }
extern "C" ::ImGuiOnceUponAFrame _1_ImGuiOnceUponAFrame_init_() { return ::ImGuiOnceUponAFrame(); }
extern "C" ::ImGuiTextFilter _1_ImGuiTextFilter_init_(const char *default_filter) { return ::ImGuiTextFilter(default_filter); }
extern "C" bool _1_ImGuiTextFilter_Draw_(::ImGuiTextFilter *self, const char *label, float width) { return self->Draw(label, width); }
extern "C" bool _1_ImGuiTextFilter_PassFilter_(const ::ImGuiTextFilter *self, const char *text, const char *text_end) { return self->PassFilter(text, text_end); }
extern "C" void _1_ImGuiTextFilter_Build_(::ImGuiTextFilter *self) { self->Build(); }
extern "C" ::ImGuiTextFilter::ImGuiTextRange _1_ImGuiTextFilter_ImGuiTextRange_init_() { return ::ImGuiTextFilter::ImGuiTextRange(); }
extern "C" ::ImGuiTextFilter::ImGuiTextRange _2_ImGuiTextFilter_ImGuiTextRange_init_(const char *_b, const char *_e) { return ::ImGuiTextFilter::ImGuiTextRange(_b, _e); }
extern "C" void _1_ImGuiTextFilter_ImGuiTextRange_split_(const ::ImGuiTextFilter::ImGuiTextRange *self, char separator, ImVector<::ImGuiTextFilter::ImGuiTextRange> *out) { self->split(separator, out); }
extern "C" const char *_1_ImGuiTextBuffer_EmptyString_() { return ::ImGuiTextBuffer::EmptyString; }
extern "C" ::ImGuiTextBuffer _1_ImGuiTextBuffer_init_() { return ::ImGuiTextBuffer(); }
extern "C" void _1_ImGuiTextBuffer_append_(::ImGuiTextBuffer *self, const char *str, const char *str_end) { self->append(str, str_end); }
extern "C" void _1_ImGuiTextBuffer_appendfv_(::ImGuiTextBuffer *self, const char *fmt, va_list args) { self->appendfv(fmt, args); }
extern "C" ::ImGuiStorage::ImGuiStoragePair _1_ImGuiStorage_ImGuiStoragePair_init_(ImGuiID _key, int _val_i) { return ::ImGuiStorage::ImGuiStoragePair(_key, _val_i); }
extern "C" ::ImGuiStorage::ImGuiStoragePair _2_ImGuiStorage_ImGuiStoragePair_init_(ImGuiID _key, float _val_f) { return ::ImGuiStorage::ImGuiStoragePair(_key, _val_f); }
extern "C" ::ImGuiStorage::ImGuiStoragePair _3_ImGuiStorage_ImGuiStoragePair_init_(ImGuiID _key, void *_val_p) { return ::ImGuiStorage::ImGuiStoragePair(_key, _val_p); }
extern "C" int _1_ImGuiStorage_GetInt_(const ::ImGuiStorage *self, ImGuiID key, int default_val) { return self->GetInt(key, default_val); }
extern "C" void _1_ImGuiStorage_SetInt_(::ImGuiStorage *self, ImGuiID key, int val) { self->SetInt(key, val); }
extern "C" bool _1_ImGuiStorage_GetBool_(const ::ImGuiStorage *self, ImGuiID key, bool default_val) { return self->GetBool(key, default_val); }
extern "C" void _1_ImGuiStorage_SetBool_(::ImGuiStorage *self, ImGuiID key, bool val) { self->SetBool(key, val); }
extern "C" float _1_ImGuiStorage_GetFloat_(const ::ImGuiStorage *self, ImGuiID key, float default_val) { return self->GetFloat(key, default_val); }
extern "C" void _1_ImGuiStorage_SetFloat_(::ImGuiStorage *self, ImGuiID key, float val) { self->SetFloat(key, val); }
extern "C" void *_1_ImGuiStorage_GetVoidPtr_(const ::ImGuiStorage *self, ImGuiID key) { return self->GetVoidPtr(key); }
extern "C" void _1_ImGuiStorage_SetVoidPtr_(::ImGuiStorage *self, ImGuiID key, void *val) { self->SetVoidPtr(key, val); }
extern "C" int *_1_ImGuiStorage_GetIntRef_(::ImGuiStorage *self, ImGuiID key, int default_val) { return self->GetIntRef(key, default_val); }
extern "C" bool *_1_ImGuiStorage_GetBoolRef_(::ImGuiStorage *self, ImGuiID key, bool default_val) { return self->GetBoolRef(key, default_val); }
extern "C" float *_1_ImGuiStorage_GetFloatRef_(::ImGuiStorage *self, ImGuiID key, float default_val) { return self->GetFloatRef(key, default_val); }
extern "C" void **_1_ImGuiStorage_GetVoidPtrRef_(::ImGuiStorage *self, ImGuiID key, void *default_val) { return self->GetVoidPtrRef(key, default_val); }
extern "C" void _1_ImGuiStorage_SetAllInt_(::ImGuiStorage *self, int val) { self->SetAllInt(val); }
extern "C" void _1_ImGuiStorage_BuildSortByKey_(::ImGuiStorage *self) { self->BuildSortByKey(); }
extern "C" ::ImGuiListClipper _1_ImGuiListClipper_init_() { return ::ImGuiListClipper(); }
extern "C" void _1_ImGuiListClipper_deinit_(::ImGuiListClipper *self) { self->~ImGuiListClipper(); }
extern "C" void _1_ImGuiListClipper_Begin_(::ImGuiListClipper *self, int items_count, float items_height) { self->Begin(items_count, items_height); }
extern "C" void _1_ImGuiListClipper_End_(::ImGuiListClipper *self) { self->End(); }
extern "C" bool _1_ImGuiListClipper_Step_(::ImGuiListClipper *self) { return self->Step(); }
extern "C" void _1_ImGuiListClipper_ForceDisplayRangeByIndices_(::ImGuiListClipper *self, int item_min, int item_max) { self->ForceDisplayRangeByIndices(item_min, item_max); }
extern "C" ::ImColor _1_ImColor_init_() { return ::ImColor(); }
extern "C" ::ImColor _2_ImColor_init_(float r, float g, float b, float a) { return ::ImColor(r, g, b, a); }
extern "C" ::ImColor _3_ImColor_init_(const ImVec4 &col) { return ::ImColor(col); }
extern "C" ::ImColor _4_ImColor_init_(int r, int g, int b, int a) { return ::ImColor(r, g, b, a); }
extern "C" ::ImColor _5_ImColor_init_(ImU32 rgba) { return ::ImColor(rgba); }
extern "C" ::ImDrawCmd _1_ImDrawCmd_init_() { return ::ImDrawCmd(); }
extern "C" ::ImDrawListSplitter _1_ImDrawListSplitter_init_() { return ::ImDrawListSplitter(); }
extern "C" void _1_ImDrawListSplitter_deinit_(::ImDrawListSplitter *self) { self->~ImDrawListSplitter(); }
extern "C" void _1_ImDrawListSplitter_ClearFreeMemory_(::ImDrawListSplitter *self) { self->ClearFreeMemory(); }
extern "C" void _1_ImDrawListSplitter_Split_(::ImDrawListSplitter *self, ImDrawList *draw_list, int count) { self->Split(draw_list, count); }
extern "C" void _1_ImDrawListSplitter_Merge_(::ImDrawListSplitter *self, ImDrawList *draw_list) { self->Merge(draw_list); }
extern "C" void _1_ImDrawListSplitter_SetCurrentChannel_(::ImDrawListSplitter *self, ImDrawList *draw_list, int channel_idx) { self->SetCurrentChannel(draw_list, channel_idx); }
extern "C" ::ImDrawList _1_ImDrawList_init_(ImDrawListSharedData *shared_data) { return ::ImDrawList(shared_data); }
extern "C" void _1_ImDrawList_deinit_(::ImDrawList *self) { self->~ImDrawList(); }
extern "C" void _1_ImDrawList_PushClipRect_(::ImDrawList *self, const ImVec2 &clip_rect_min, const ImVec2 &clip_rect_max, bool intersect_with_current_clip_rect) { self->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect); }
extern "C" void _1_ImDrawList_PushClipRectFullScreen_(::ImDrawList *self) { self->PushClipRectFullScreen(); }
extern "C" void _1_ImDrawList_PopClipRect_(::ImDrawList *self) { self->PopClipRect(); }
extern "C" void _1_ImDrawList_PushTextureID_(::ImDrawList *self, ImTextureID texture_id) { self->PushTextureID(texture_id); }
extern "C" void _1_ImDrawList_PopTextureID_(::ImDrawList *self) { self->PopTextureID(); }
extern "C" void _1_ImDrawList_AddLine_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, ImU32 col, float thickness) { self->AddLine(p1, p2, col, thickness); }
extern "C" void _1_ImDrawList_AddRect_(::ImDrawList *self, const ImVec2 &p_min, const ImVec2 &p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness) { self->AddRect(p_min, p_max, col, rounding, flags, thickness); }
extern "C" void _1_ImDrawList_AddRectFilled_(::ImDrawList *self, const ImVec2 &p_min, const ImVec2 &p_max, ImU32 col, float rounding, ImDrawFlags flags) { self->AddRectFilled(p_min, p_max, col, rounding, flags); }
extern "C" void _1_ImDrawList_AddRectFilledMultiColor_(::ImDrawList *self, const ImVec2 &p_min, const ImVec2 &p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left) { self->AddRectFilledMultiColor(p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left); }
extern "C" void _1_ImDrawList_AddQuad_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, const ImVec2 &p4, ImU32 col, float thickness) { self->AddQuad(p1, p2, p3, p4, col, thickness); }
extern "C" void _1_ImDrawList_AddQuadFilled_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, const ImVec2 &p4, ImU32 col) { self->AddQuadFilled(p1, p2, p3, p4, col); }
extern "C" void _1_ImDrawList_AddTriangle_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, ImU32 col, float thickness) { self->AddTriangle(p1, p2, p3, col, thickness); }
extern "C" void _1_ImDrawList_AddTriangleFilled_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, ImU32 col) { self->AddTriangleFilled(p1, p2, p3, col); }
extern "C" void _1_ImDrawList_AddCircle_(::ImDrawList *self, const ImVec2 &center, float radius, ImU32 col, int num_segments, float thickness) { self->AddCircle(center, radius, col, num_segments, thickness); }
extern "C" void _1_ImDrawList_AddCircleFilled_(::ImDrawList *self, const ImVec2 &center, float radius, ImU32 col, int num_segments) { self->AddCircleFilled(center, radius, col, num_segments); }
extern "C" void _1_ImDrawList_AddNgon_(::ImDrawList *self, const ImVec2 &center, float radius, ImU32 col, int num_segments, float thickness) { self->AddNgon(center, radius, col, num_segments, thickness); }
extern "C" void _1_ImDrawList_AddNgonFilled_(::ImDrawList *self, const ImVec2 &center, float radius, ImU32 col, int num_segments) { self->AddNgonFilled(center, radius, col, num_segments); }
extern "C" void _1_ImDrawList_AddText_(::ImDrawList *self, const ImVec2 &pos, ImU32 col, const char *text_begin, const char *text_end) { self->AddText(pos, col, text_begin, text_end); }
extern "C" void _2_ImDrawList_AddText_(::ImDrawList *self, const ImFont *font, float font_size, const ImVec2 &pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const ImVec4 *cpu_fine_clip_rect) { self->AddText(font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect); }
extern "C" void _1_ImDrawList_AddPolyline_(::ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col, ImDrawFlags flags, float thickness) { self->AddPolyline(points, num_points, col, flags, thickness); }
extern "C" void _1_ImDrawList_AddConvexPolyFilled_(::ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col) { self->AddConvexPolyFilled(points, num_points, col); }
extern "C" void _1_ImDrawList_AddBezierCubic_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, const ImVec2 &p4, ImU32 col, float thickness, int num_segments) { self->AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments); }
extern "C" void _1_ImDrawList_AddBezierQuadratic_(::ImDrawList *self, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, ImU32 col, float thickness, int num_segments) { self->AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments); }
extern "C" void _1_ImDrawList_AddImage_(::ImDrawList *self, ImTextureID user_texture_id, const ImVec2 &p_min, const ImVec2 &p_max, const ImVec2 &uv_min, const ImVec2 &uv_max, ImU32 col) { self->AddImage(user_texture_id, p_min, p_max, uv_min, uv_max, col); }
extern "C" void _1_ImDrawList_AddImageQuad_(::ImDrawList *self, ImTextureID user_texture_id, const ImVec2 &p1, const ImVec2 &p2, const ImVec2 &p3, const ImVec2 &p4, const ImVec2 &uv1, const ImVec2 &uv2, const ImVec2 &uv3, const ImVec2 &uv4, ImU32 col) { self->AddImageQuad(user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col); }
extern "C" void _1_ImDrawList_AddImageRounded_(::ImDrawList *self, ImTextureID user_texture_id, const ImVec2 &p_min, const ImVec2 &p_max, const ImVec2 &uv_min, const ImVec2 &uv_max, ImU32 col, float rounding, ImDrawFlags flags) { self->AddImageRounded(user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags); }
extern "C" void _1_ImDrawList_PathArcTo_(::ImDrawList *self, const ImVec2 &center, float radius, float a_min, float a_max, int num_segments) { self->PathArcTo(center, radius, a_min, a_max, num_segments); }
extern "C" void _1_ImDrawList_PathArcToFast_(::ImDrawList *self, const ImVec2 &center, float radius, int a_min_of_12, int a_max_of_12) { self->PathArcToFast(center, radius, a_min_of_12, a_max_of_12); }
extern "C" void _1_ImDrawList_PathBezierCubicCurveTo_(::ImDrawList *self, const ImVec2 &p2, const ImVec2 &p3, const ImVec2 &p4, int num_segments) { self->PathBezierCubicCurveTo(p2, p3, p4, num_segments); }
extern "C" void _1_ImDrawList_PathBezierQuadraticCurveTo_(::ImDrawList *self, const ImVec2 &p2, const ImVec2 &p3, int num_segments) { self->PathBezierQuadraticCurveTo(p2, p3, num_segments); }
extern "C" void _1_ImDrawList_PathRect_(::ImDrawList *self, const ImVec2 &rect_min, const ImVec2 &rect_max, float rounding, ImDrawFlags flags) { self->PathRect(rect_min, rect_max, rounding, flags); }
extern "C" void _1_ImDrawList_AddCallback_(::ImDrawList *self, ImDrawCallback callback, void *callback_data) { self->AddCallback(callback, callback_data); }
extern "C" void _1_ImDrawList_AddDrawCmd_(::ImDrawList *self) { self->AddDrawCmd(); }
extern "C" ImDrawList *_1_ImDrawList_CloneOutput_(const ::ImDrawList *self) { return self->CloneOutput(); }
extern "C" void _1_ImDrawList_PrimReserve_(::ImDrawList *self, int idx_count, int vtx_count) { self->PrimReserve(idx_count, vtx_count); }
extern "C" void _1_ImDrawList_PrimUnreserve_(::ImDrawList *self, int idx_count, int vtx_count) { self->PrimUnreserve(idx_count, vtx_count); }
extern "C" void _1_ImDrawList_PrimRect_(::ImDrawList *self, const ImVec2 &a, const ImVec2 &b, ImU32 col) { self->PrimRect(a, b, col); }
extern "C" void _1_ImDrawList_PrimRectUV_(::ImDrawList *self, const ImVec2 &a, const ImVec2 &b, const ImVec2 &uv_a, const ImVec2 &uv_b, ImU32 col) { self->PrimRectUV(a, b, uv_a, uv_b, col); }
extern "C" void _1_ImDrawList_PrimQuadUV_(::ImDrawList *self, const ImVec2 &a, const ImVec2 &b, const ImVec2 &c, const ImVec2 &d, const ImVec2 &uv_a, const ImVec2 &uv_b, const ImVec2 &uv_c, const ImVec2 &uv_d, ImU32 col) { self->PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); }
extern "C" void _1_ImDrawList__ResetForNewFrame_(::ImDrawList *self) { self->_ResetForNewFrame(); }
extern "C" void _1_ImDrawList__ClearFreeMemory_(::ImDrawList *self) { self->_ClearFreeMemory(); }
extern "C" void _1_ImDrawList__PopUnusedDrawCmd_(::ImDrawList *self) { self->_PopUnusedDrawCmd(); }
extern "C" void _1_ImDrawList__TryMergeDrawCmds_(::ImDrawList *self) { self->_TryMergeDrawCmds(); }
extern "C" void _1_ImDrawList__OnChangedClipRect_(::ImDrawList *self) { self->_OnChangedClipRect(); }
extern "C" void _1_ImDrawList__OnChangedTextureID_(::ImDrawList *self) { self->_OnChangedTextureID(); }
extern "C" void _1_ImDrawList__OnChangedVtxOffset_(::ImDrawList *self) { self->_OnChangedVtxOffset(); }
extern "C" int _1_ImDrawList__CalcCircleAutoSegmentCount_(const ::ImDrawList *self, float radius) { return self->_CalcCircleAutoSegmentCount(radius); }
extern "C" void _1_ImDrawList__PathArcToFastEx_(::ImDrawList *self, const ImVec2 &center, float radius, int a_min_sample, int a_max_sample, int a_step) { self->_PathArcToFastEx(center, radius, a_min_sample, a_max_sample, a_step); }
extern "C" void _1_ImDrawList__PathArcToN_(::ImDrawList *self, const ImVec2 &center, float radius, float a_min, float a_max, int num_segments) { self->_PathArcToN(center, radius, a_min, a_max, num_segments); }
extern "C" ::ImDrawData _1_ImDrawData_init_() { return ::ImDrawData(); }
extern "C" void _1_ImDrawData_DeIndexAllBuffers_(::ImDrawData *self) { self->DeIndexAllBuffers(); }
extern "C" void _1_ImDrawData_ScaleClipRects_(::ImDrawData *self, const ImVec2 &fb_scale) { self->ScaleClipRects(fb_scale); }
extern "C" ::ImFontConfig _1_ImFontConfig_init_() { return ::ImFontConfig(); }
extern "C" ::ImFontGlyphRangesBuilder _1_ImFontGlyphRangesBuilder_init_() { return ::ImFontGlyphRangesBuilder(); }
extern "C" void _1_ImFontGlyphRangesBuilder_AddText_(::ImFontGlyphRangesBuilder *self, const char *text, const char *text_end) { self->AddText(text, text_end); }
extern "C" void _1_ImFontGlyphRangesBuilder_AddRanges_(::ImFontGlyphRangesBuilder *self, const ImWchar *ranges) { self->AddRanges(ranges); }
extern "C" void _1_ImFontGlyphRangesBuilder_BuildRanges_(::ImFontGlyphRangesBuilder *self, ImVector<ImWchar> *out_ranges) { self->BuildRanges(out_ranges); }
extern "C" ::ImFontAtlasCustomRect _1_ImFontAtlasCustomRect_init_() { return ::ImFontAtlasCustomRect(); }
extern "C" ::ImFontAtlas _1_ImFontAtlas_init_() { return ::ImFontAtlas(); }
extern "C" void _1_ImFontAtlas_deinit_(::ImFontAtlas *self) { self->~ImFontAtlas(); }
extern "C" ImFont *_1_ImFontAtlas_AddFont_(::ImFontAtlas *self, const ImFontConfig *font_cfg) { return self->AddFont(font_cfg); }
extern "C" ImFont *_1_ImFontAtlas_AddFontDefault_(::ImFontAtlas *self, const ImFontConfig *font_cfg) { return self->AddFontDefault(font_cfg); }
extern "C" ImFont *_1_ImFontAtlas_AddFontFromFileTTF_(::ImFontAtlas *self, const char *filename, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges) { return self->AddFontFromFileTTF(filename, size_pixels, font_cfg, glyph_ranges); }
extern "C" ImFont *_1_ImFontAtlas_AddFontFromMemoryTTF_(::ImFontAtlas *self, void *font_data, int font_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges) { return self->AddFontFromMemoryTTF(font_data, font_size, size_pixels, font_cfg, glyph_ranges); }
extern "C" ImFont *_1_ImFontAtlas_AddFontFromMemoryCompressedTTF_(::ImFontAtlas *self, const void *compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges) { return self->AddFontFromMemoryCompressedTTF(compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges); }
extern "C" ImFont *_1_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF_(::ImFontAtlas *self, const char *compressed_font_data_base85, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges) { return self->AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges); }
extern "C" void _1_ImFontAtlas_ClearInputData_(::ImFontAtlas *self) { self->ClearInputData(); }
extern "C" void _1_ImFontAtlas_ClearTexData_(::ImFontAtlas *self) { self->ClearTexData(); }
extern "C" void _1_ImFontAtlas_ClearFonts_(::ImFontAtlas *self) { self->ClearFonts(); }
extern "C" void _1_ImFontAtlas_Clear_(::ImFontAtlas *self) { self->Clear(); }
extern "C" bool _1_ImFontAtlas_Build_(::ImFontAtlas *self) { return self->Build(); }
extern "C" void _1_ImFontAtlas_GetTexDataAsAlpha8_(::ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel) { self->GetTexDataAsAlpha8(out_pixels, out_width, out_height, out_bytes_per_pixel); }
extern "C" void _1_ImFontAtlas_GetTexDataAsRGBA32_(::ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel) { self->GetTexDataAsRGBA32(out_pixels, out_width, out_height, out_bytes_per_pixel); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesDefault_(::ImFontAtlas *self) { return self->GetGlyphRangesDefault(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesGreek_(::ImFontAtlas *self) { return self->GetGlyphRangesGreek(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesKorean_(::ImFontAtlas *self) { return self->GetGlyphRangesKorean(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesJapanese_(::ImFontAtlas *self) { return self->GetGlyphRangesJapanese(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesChineseFull_(::ImFontAtlas *self) { return self->GetGlyphRangesChineseFull(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon_(::ImFontAtlas *self) { return self->GetGlyphRangesChineseSimplifiedCommon(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesCyrillic_(::ImFontAtlas *self) { return self->GetGlyphRangesCyrillic(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesThai_(::ImFontAtlas *self) { return self->GetGlyphRangesThai(); }
extern "C" const ImWchar *_1_ImFontAtlas_GetGlyphRangesVietnamese_(::ImFontAtlas *self) { return self->GetGlyphRangesVietnamese(); }
extern "C" int _1_ImFontAtlas_AddCustomRectRegular_(::ImFontAtlas *self, int width, int height) { return self->AddCustomRectRegular(width, height); }
extern "C" int _1_ImFontAtlas_AddCustomRectFontGlyph_(::ImFontAtlas *self, ImFont *font, ImWchar id, int width, int height, float advance_x, const ImVec2 &offset) { return self->AddCustomRectFontGlyph(font, id, width, height, advance_x, offset); }
extern "C" void _1_ImFontAtlas_CalcCustomRectUV_(const ::ImFontAtlas *self, const ImFontAtlasCustomRect *rect, ImVec2 *out_uv_min, ImVec2 *out_uv_max) { self->CalcCustomRectUV(rect, out_uv_min, out_uv_max); }
extern "C" bool _1_ImFontAtlas_GetMouseCursorTexData_(::ImFontAtlas *self, ImGuiMouseCursor cursor, ImVec2 *out_offset, ImVec2 *out_size, ImVec2 *out_uv_border, ImVec2 *out_uv_fill) { return self->GetMouseCursorTexData(cursor, out_offset, out_size, out_uv_border, out_uv_fill); }
extern "C" ::ImFont _1_ImFont_init_() { return ::ImFont(); }
extern "C" void _1_ImFont_deinit_(::ImFont *self) { self->~ImFont(); }
extern "C" const ImFontGlyph *_1_ImFont_FindGlyph_(const ::ImFont *self, ImWchar c) { return self->FindGlyph(c); }
extern "C" const ImFontGlyph *_1_ImFont_FindGlyphNoFallback_(const ::ImFont *self, ImWchar c) { return self->FindGlyphNoFallback(c); }
extern "C" ImVec2 _1_ImFont_CalcTextSizeA_(const ::ImFont *self, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining) { return self->CalcTextSizeA(size, max_width, wrap_width, text_begin, text_end, remaining); }
extern "C" const char *_1_ImFont_CalcWordWrapPositionA_(const ::ImFont *self, float scale, const char *text, const char *text_end, float wrap_width) { return self->CalcWordWrapPositionA(scale, text, text_end, wrap_width); }
extern "C" void _1_ImFont_RenderChar_(const ::ImFont *self, ImDrawList *draw_list, float size, const ImVec2 &pos, ImU32 col, ImWchar c) { self->RenderChar(draw_list, size, pos, col, c); }
extern "C" void _1_ImFont_RenderText_(const ::ImFont *self, ImDrawList *draw_list, float size, const ImVec2 &pos, ImU32 col, const ImVec4 &clip_rect, const char *text_begin, const char *text_end, float wrap_width, bool cpu_fine_clip) { self->RenderText(draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip); }
extern "C" void _1_ImFont_BuildLookupTable_(::ImFont *self) { self->BuildLookupTable(); }
extern "C" void _1_ImFont_ClearOutputData_(::ImFont *self) { self->ClearOutputData(); }
extern "C" void _1_ImFont_GrowIndex_(::ImFont *self, int new_size) { self->GrowIndex(new_size); }
extern "C" void _1_ImFont_AddGlyph_(::ImFont *self, const ImFontConfig *src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) { self->AddGlyph(src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x); }
extern "C" void _1_ImFont_AddRemapChar_(::ImFont *self, ImWchar dst, ImWchar src, bool overwrite_dst) { self->AddRemapChar(dst, src, overwrite_dst); }
extern "C" void _1_ImFont_SetGlyphVisible_(::ImFont *self, ImWchar c, bool visible) { self->SetGlyphVisible(c, visible); }
extern "C" bool _1_ImFont_IsGlyphRangeUnused_(::ImFont *self, unsigned int c_begin, unsigned int c_last) { return self->IsGlyphRangeUnused(c_begin, c_last); }
extern "C" ::ImGuiViewport _1_ImGuiViewport_init_() { return ::ImGuiViewport(); }
extern "C" ::ImGuiPlatformImeData _1_ImGuiPlatformImeData_init_() { return ::ImGuiPlatformImeData(); }
extern "C" ImGuiKey _1_ImGui_GetKeyIndex_(ImGuiKey key) { return ::ImGui::GetKeyIndex(key); }
